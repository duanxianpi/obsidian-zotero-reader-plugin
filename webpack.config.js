// webpack.config.js  (webpack 5)

const path = require("path");
const webpack = require("webpack");
const builtins = require("builtin-modules");
const zlib = require("zlib");

module.exports = (_env, argv) => {
	const prod = argv.mode === "production";

	const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY WEBPACK
if you want to view the source, please visit the github repository of this plugin
*/`;

	// ---------- 1.  JS / TS bundle (main.js) ----------
	const jsConfig = {
		name: "main",
		target: "node", // keep Node-builtins, CJS output
		entry: "./src/main.ts",
		output: {
			filename: "main.js",
			path: path.resolve(__dirname),
			libraryTarget: "commonjs2",
		},
		mode: prod ? "production" : "development",
		devtool: prod ? false : "inline-source-map",
		resolve: {
			alias: {
				"node:stream": require.resolve("stream-browserify"),
			},
			fallback: {
				stream: require.resolve("stream-browserify"),
			},
			extensions: [".ts", ".tsx", ".js"],
		},
		module: {
			rules: [
				{
					test: /\.tsx?$/,
					use: "ts-loader",
					exclude: /node_modules/,
				},
				{
					test: /.*/,
					include: [
						path.resolve(__dirname, "reader/reader/build/obsidian"),
					],
					type: "asset/inline",
					generator: {
						dataUrl: (content) => {
							const gzipped = zlib.gzipSync(content);
							const base64 = gzipped.toString("base64");
							return `data:application/gzip;base64,${base64}`;
						},
					},
				},
			],
		},
		externals: [
			// keep these out of the bundle exactly as in esbuild
			"obsidian",
			"electron",
			"@codemirror/autocomplete",
			"@codemirror/collab",
			"@codemirror/commands",
			"@codemirror/language",
			"@codemirror/lint",
			"@codemirror/search",
			"@codemirror/state",
			"@codemirror/view",
			"@lezer/common",
			"@lezer/highlight",
			"@lezer/lr",
			...builtins,
		],
		optimization: {
			minimize: prod,
		},
		plugins: [new webpack.BannerPlugin({ banner, raw: true })],
		watch: !prod,
	};

	return jsConfig;
};
